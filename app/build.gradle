plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'kotlin-kapt'
    id 'androidx.navigation.safeargs.kotlin'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.example.weatherapp"
        minSdk 21
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
//        testInstrumentationRunner "com.example.weatherapp.CustomTestRunner"

//       android {
           sourceSets {
               String sharedTestDir = "src/sharedTest/java"
               test {
                   java.srcDir sharedTestDir
               }
               androidTest {
                   java.srcDir sharedTestDir
               }
           }
//       }

        def apiPropertiesFile = rootProject.file("apikeys.properties")
        def apikeyProperties = new Properties()
        apikeyProperties.load(new FileInputStream(apiPropertiesFile))

        buildConfigField("String","DATABASE_NAME","\"weather_db\"")
        buildConfigField("String","BASEURL","\"https://api.openweathermap.org/data/2.5/\"")
        buildConfigField("String","IMAGE_ENDPOINT","\"https://openweathermap.org/img/wn/\"")
        buildConfigField("String","WEATHER_API_KEY",apikeyProperties['WEATHER_API_KEY'])
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }



    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }



    kotlinOptions {
        jvmTarget = '1.8'
    }

    def retrofit_version= "2.6.2"
    def roomDB_version=  "2.3.0"
    def dagger_version = "2.31"
    def lifecycle_version = "2.4.0-rc01"

    dependencies {

       /*User Interface*/
        implementation 'androidx.core:core-ktx:1.6.0'
        implementation 'androidx.appcompat:appcompat:1.3.1'
        implementation 'com.google.android.material:material:1.4.0'
        implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
        implementation 'androidx.legacy:legacy-support-v4:1.0.0'
        implementation "androidx.recyclerview:recyclerview:1.2.0-alpha04"

        /*Ktx libs*/
        implementation "androidx.fragment:fragment-ktx:1.3.6"
        implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"
        implementation "androidx.navigation:navigation-runtime-ktx:$navigation_version"
        implementation "androidx.navigation:navigation-fragment-ktx:$navigation_version"
        implementation "androidx.navigation:navigation-ui-ktx:$navigation_version"



        /*livecycle*/
        implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"
        implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

        /*Networking*/
        implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
        implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
        implementation 'com.squareup.okhttp3:logging-interceptor:4.7.2'



        /*Local Database*/
        implementation "androidx.room:room-runtime:$roomDB_version"
        implementation "androidx.room:room-ktx:$roomDB_version"
        kapt "androidx.room:room-compiler:$roomDB_version"

        /*Image Loading*/
        implementation 'com.github.bumptech.glide:glide:4.11.0'


        /*Dependency Injection*/
        implementation "com.google.dagger:dagger:$dagger_version"
        kapt "com.google.dagger:dagger-compiler:$dagger_version"
        implementation "com.google.dagger:dagger-android-support:$dagger_version"
        kapt "com.google.dagger:dagger-android-processor:$dagger_version"




        /*Unit Testing*/
        testImplementation 'junit:junit:4.13.2'
        testImplementation 'androidx.test:core-ktx:1.4.0'
//        testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.3.9'
//        testImplementation "android.arch.core:core-testing:1.1.1"
//        testImplementation "org.mockito:mockito-core:3.3.3"
//        testImplementation "com.nhaarman.mockitokotlin2:mockito-kotlin:2.2.0"
//        testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.9"
//        testImplementation 'org.mockito:mockito-inline:2.13.0'
        // Using Dagger in androidTest and Robolectric too
        kaptTest "com.google.dagger:dagger-compiler:$dagger_version"
        testImplementation "androidx.arch.core:core-testing:2.1.0"
        testImplementation "com.google.truth:truth:0.42"
        testImplementation "com.squareup.okhttp3:mockwebserver:4.6.0"
        testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.5.0"
        testImplementation 'org.robolectric:robolectric:4.3.1'


        // Used across all test
        implementation 'androidx.test:runner:1.4.0'


        
        /* Instrumentation and E_to_E Testing*/
        androidTestImplementation 'androidx.test.ext:junit:1.1.1'
//        androidTestImplementation 'junit:junit:4.13'
//        androidTestImplementation 'androidx.test:runner:1.4.0'
        androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
        androidTestImplementation "com.squareup.okhttp3:mockwebserver:4.6.0"
        kaptAndroidTest "com.google.dagger:dagger-compiler:$dagger_version"


// AndroidJUnitRunner and JUnit Rules
        androidTestImplementation 'androidx.test:runner:1.4.0'
        androidTestImplementation 'androidx.test:rules:1.4.0'


        implementation 'androidx.test.ext:junit-ktx:1.1.3'


    }


}
//
//dependencies {
//
//}


//android.applicationVariants.all {
//    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
//    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
//}

